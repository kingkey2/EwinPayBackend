@{
    var bc = new BackendController(); string BID = HttpContext.Current.Request.Cookies.AllKeys.Contains("BID") == true ? HttpContext.Current.Request.Cookies["BID"].Value.ToString() : "";

    string CheckPermission = "success";

    string PermissionName = Request.Path.Split('/').Last().Split('.').First();
    var result = bc.CheckPermission(BID, PermissionName);

    if (result.ResultCode != BackendController.APIResult.enumResult.OK)
    {
        CheckPermission = "false";
    }

    var resultCheckLoginIP = bc.CheckLoginIPByCompany(BID);
    string CheckLoginPermission = "success";
    if (resultCheckLoginIP.ResultCode != BackendController.APIResult.enumResult.OK)
    {
        CheckLoginPermission = "false";
    }
}
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    <meta name="description" content="Responsive Bootstrap 4 and web Application ui kit.">
    <title>GPay</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <!-- Favicon-->
    <link rel="stylesheet" href="~/Backend/assets/plugins/bootstrap/css/bootstrap.min.css">
    <!-- Bootstrap Select Css -->
    <link href="~/Backend/assets/plugins/bootstrap-select/css/bootstrap-select.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/Backend/assets/plugins/jvectormap/jquery-jvectormap-2.0.3.min.css" />
    <link rel="stylesheet" href="~/Backend/assets/plugins/morrisjs/morris.min.css" />
    <!-- Custom Css -->
    <link rel="stylesheet" href="~/Backend/assets/css/main.css">
    <link rel="stylesheet" href="~/Backend/assets/css/color_skins.css">
    <!-- JQuery DataTable Css -->
    <link rel="stylesheet" href="~/Backend/assets/plugins/jquery-datatable/dataTables.bootstrap4.min.css">

    <!-- JQuery sweetalert Css -->
    <link href="~/Backend/assets/plugins/sweetalert/sweetalert.css" rel="stylesheet" />
    <!-- JQuery jquery-nestable Css -->
    <link href="~/Backend/assets/plugins/nestable/jquery-nestable.css" rel="stylesheet" />
    <!-- datetimepicker Css-->
    <link href="~/Backend/assets/plugins/bootstrap-material-datetimepicker/css/bootstrap-material-datetimepicker.css" rel="stylesheet" />
    <!-- JQuery multi-select Css -->
    <link href="~/Backend/assets/plugins/multi-select/css/multi-select.css" rel="stylesheet" />
    <link href="~/Backend/assets/css/ecommerce.css" rel="stylesheet" />
    <!-- jquery-ui Css -->
    <link href="~/Backend/assets/css/jquery-ui.css" rel="stylesheet" />
    <link href="~/Backend/assets/css/ui.tabs.overflowResize.css" rel="stylesheet" />
    <!-- Jquery Core Js -->
    <script src="~/Backend/assets/js/jquery-3.3.1.min.js"></script>
    <script src="~/Backend/assets/js/D3/d3.min.js"></script>
    <script src="~/Backend/assets/bundles/libscripts.bundle.js"></script> <!--Lib Scripts Plugin Js ( jquery.v3.2.1, Bootstrap4 js)-->
    <script src="~/Backend/assets/bundles/vendorscripts.bundle.js"></script>  <!--slimscroll, waves Scripts Plugin Js-->
    <script src="~/Backend/assets/plugins/multi-select/js/jquery.multi-select.js"></script>
    <script src="~/Backend/assets/plugins/momentjs/moment.js"></script> <!-- Moment Plugin Js -->
    <script src="~/Backend/assets/bundles/morrisscripts.bundle.js"></script><!-- Morris Plugin Js -->
    <script src="~/Backend/assets/bundles/jvectormap.bundle.js"></script> <!-- JVectorMap Plugin Js -->
    <script src="~/Backend/assets/bundles/knob.bundle.js"></script> <!-- Jquery Knob-->
    <script src="~/Backend/assets/bundles/mainscripts.bundle.js"></script>
    <script src="~/Backend/assets/js/pages/index.js"></script>
    <script src="~/Backend/assets/plugins/nestable/jquery.nestable.js"></script>
    <script src="~/Backend/assets/plugins/jquery-spinner/js/jquery.spinner.js"></script>
    <!-- Jquery DataTable Plugin Js -->
    <script src="~/Backend/assets/bundles/datatablescripts.bundle.js"></script>
    <script src="~/Backend/assets/plugins/jquery-datatable/buttons/dataTables.buttons.min.js"></script>
    <script src="~/Backend/assets/plugins/jquery-datatable/buttons/buttons.bootstrap4.min.js"></script>
    <script src="~/Backend/assets/plugins/jquery-datatable/buttons/buttons.colVis.min.js"></script>
    <script src="~/Backend/assets/plugins/jquery-datatable/buttons/buttons.html5.min.js"></script>
    <script src="~/Backend/assets/plugins/jquery-datatable/buttons/buttons.print.min.js"></script>
    <script src="~/Backend/assets/js/pages/tables/jquery-datatable.js"></script>

    <script src="~/Backend/assets/plugins/jquery-datatable/dataTables.responsive.min.js"></script>
    <script src="~/Backend/assets/plugins/bootstrap-notify/bootstrap-notify.min.js"></script>
    <script src="~/Backend/assets/plugins/jquery-inputmask/jquery.inputmask.bundle.js"></script>
    <!-- basic-form-elements Js -->
    @*<script src="assets/js/pages/forms/basic-form-elements.js"></script>*@
    <!-- datetimepicker Js -->
    <script src="~/Backend/assets/plugins/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js"></script>
    <!-- sweetalert Plugin Js -->
    <script src="~/Backend/assets/plugins/sweetalert/sweetalert.min.js"></script>
    <script src="~/Backend/assets/plugins/jquery-spinner/js/jquery.spinner.js"></script>
    <script src="~/Backend/assets/js/BackendJS/BackendAPI.js?20200326"></script>
    <script src="~/Backend/assets/js/AutoNumeric.js"></script>
    <script src="~/Backend/assets/js/ion.sound.min.js"></script>
    <!-- JQuery 頁籤 Js -->
    <script src="~/Backend/assets/js/jquery-ui.js"></script>
    <script src="~/Backend/assets/js/ui.tabs.overflowResize.js"></script>
    <script src="~/Backend/assets/js/ui.tabs.addTab.js"></script>
    <script src="~/Backend/assets/js/ui.tabs.closable.js"></script>

    <script src="~/Backend/assets/js/common.js"></script>

    <style>

        ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
            color: black !important;
            opacity: 1; /* Firefox */
        }

        .filter-option {
            color: black !important;
            opacity: 0.8;
        }
        /* fallback */
        @@font-face {
            font-family: 'Material Icons';
            font-style: normal;
            font-weight: 400;
            src: url(https://fonts.gstatic.com/s/materialicons/v47/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2) format('woff2');
        }

        button:hover {
            cursor: pointer;
        }

        .material-icons {
            font-family: 'Material Icons';
            font-weight: normal;
            font-style: normal;
            font-size: 24px;
            line-height: 1;
            letter-spacing: normal;
            text-transform: none;
            display: inline-block;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            -webkit-font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
        }

        .dtp-buttons {
            display: none;
        }

        .navbar

        .divided:hover {
            cursor: pointer;
        }

        button, input, optgroup, select, textarea {
            margin: 0;
            font-family: "Microsoft JhengHei";
            font-size: inherit;
            line-height: inherit;
        }

        form > label {
            font-size: 14px;
            font-weight: bold;
        }

        [data-notify="container"][class*="alert-pastel-"] {
            background-color: rgb(255, 255, 238);
            border-width: 0px;
            border-left: 15px solid rgb(255, 240, 106);
            border-radius: 0px;
            box-shadow: 0px 0px 5px rgba(51, 51, 51, 0.3);
            font-family: 'Old Standard TT', serif;
            letter-spacing: 1px;
            opacity: 0.9;
            width: 90%;
        }

        [data-notify="container"].alert-pastel-info {
            border-left-color: rgb(255, 179, 40);
        }

        [data-notify="container"].alert-pastel-danger {
            border-left-color: rgb(255, 103, 76);
        }

        [data-notify="container"][class*="alert-pastel-"] > [data-notify="title"] {
            color: rgb(80, 80, 57);
            display: block;
            font-weight: 700;
            margin-bottom: 5px;
        }

        [data-notify="container"][class*="alert-pastel-"] > [data-notify="message"] {
            font-weight: 400;
            color: black;
        }

        .alert .close {
            color: black !important;
            margin-right: 20px;
        }

        .selectedItem {
            color: forestgreen !important;
            background: #DDDDDD !important;
            border-color: black !important;
        }

            .selectedItem:hover {
                color: forestgreen;
                background: #DDDDDD;
            }

        .dd-handle:hover {
            cursor: pointer;
        }

        table .selected {
            background-color: #dff0d8 !important;
        }

        .show > .dropdown-toggle {
            color: #fff !important;
        }

        .table-responsive > div > table {
            width: 100%;
        }

        .btn-timeZone:hover {
            cursor: pointer;
        }
        /*.dtr-data {
            word-break: normal;
            width: auto;
            display: block;
            white-space: pre-wrap;
            word-wrap: break-word;
            overflow: hidden;
        }*/
        .dtr-title {
            display: inline-block;
            width: 150px;
            font-weight: bold;
            white-space: pre-wrap;
            word-wrap: break-word;
            word-break: normal;
        }

        table.dataTable > tbody > tr.child ul.dtr-details {
            display: block;
            list-style-type: none;
            margin: 0;
            padding: 0;
        }



        .card_title {
            font-size: 22px;
        }

        .card_subtitle {
            padding: 20px;
        }

        .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6 {
            font-family: "Microsoft JhengHei";
        }

        * {
            font-family: 微軟正黑體, 微軟雅黑體, Arial;
        }
        /*body{min-width: 1200px;}*/
        /*body > .bg{background-image: url('../bg/davide-ragusa-716-unsplash.jpg');}*/
        body > .bg {
            background-image: url('assets/background/bg.jpg');
        }
        /*body > .bg{background-image: url('backgrounds/1.jpg');}*/
        /*body > .bg{background-image: url('../bg/jeremy-bishop-171845-unsplash.jpg');}*/
        /*body > .bg{background-image: url('../bg/paul-carmona-276464-unsplash.jpg');}*/
        /*body > .bg{background-image: url('../bg/vinoth-ragunathan-96670-unsplash.jpg');}*/
        body > .bg {
            background-size: cover;
            position: fixed;
            width: 100%;
            height: 100%;
        }

        .navbar-brand img {
            filter: brightness(10);
        }

        .navbar-brand span {
            color: #fff;
        }
        /*.navbar-nav > li > a i.fa-sync-alt, .navbar-nav > li > a i.fa-bell, .navbar-nav > li > a i.fa-caret-down{font-size: inherit;}*/
        nav.navbar li > a {
            color: #fff !important;
        }

        li.divided > a {
            display: inline-block;
            line-height: 30px;
            padding: 0 15px;
        }

        span.label.label-transparent-black {
            position: absolute;
            top: -10px;
            left: 26px;
            z-index: 2;
        }

            span.label.label-transparent-black:before {
                content: '';
                background-color: #FF6B6B;
                position: absolute;
                width: 18px;
                height: 18px;
                border-radius: 50%;
                left: 50%;
                top: 50%;
                transform: translate(-50%,-50%);
                z-index: -1;
            }

        .displaynone, .overlay, .sidebar .menu .list .ml-menu, .menu_sm .sidebar .list li.header, .menu_sm .sidebar .list .detail, .menu_sm .sidebar .list a::before, .menu_sm .sidebar .list a::after, .menu_sm .sidebar .list a span {
            background-color: rgba(0,0,0,0.2);
        }

        .user .profile-photo {
            display: inline-block;
            width: 92px;
            height: 92px;
            margin: 0 0 4px 0;
            border-radius: 50%;
            border: 4px solid #fff;
            box-shadow: 0 2px 16px rgba(0,0,0,0.4);
            transition: 0.2s all;
        }

            .user .profile-photo img {
                width: 100%;
            }

        #current-user {
            text-align: center;
            list-style: none;
            margin: 16px 0 0;
        }

            #current-user .account p {
                color: #fff;
            }

            #current-user .account #layoutCompanyName {
                font-size: 18px;
                margin: 6px 0;
            }

            #current-user .account #layoutLoginAccount {
                font-size: 14px;
                font-weight: lighter;
                margin: 0;
                padding-bottom: 12px;
                border-bottom: 1px solid rgba(255,255,255,0.2);
            }

        #leftsidebar {
            background-color: rgba(0,0,0,0.1);
        }

        .sidebar .menu .list a {
            color: #eee;
            padding: 12px 16px;
        }

            .sidebar .menu .list a span {
                font-size: 16px;
            }

        .sidebar .menu .list .ml-menu li a {
            padding: 10px 0 10px 60px;
        }

            .sidebar .menu .list .ml-menu li a:before {
                content: '';
            }

        #timeShowBox {
            color: #fff;
            margin: 0;
        }

        #timeZoneSelect {
            width: 90%;
            height: 0;
            margin: 8px auto 0;
            background-color: #fff;
            border-radius: 4px;
            box-shadow: 0 2px 32px rgba(0,0,0,0.1);
            position: relative;
            text-align: center;
            transition: 0.3s all;
            font-size: 0;
        }

            #timeZoneSelect:before {
                content: '';
                position: absolute;
                top: -4px;
                left: 50%;
                transform: translateX(-50%);
                width: 0;
                height: 0;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-bottom: 5px solid transparent;
                transition: 0.3s all;
            }

            #timeZoneSelect.active {
                height: 54px;
                padding: 12px 0;
            }

                #timeZoneSelect.active:before {
                    border-bottom: 5px solid #fff;
                }

            #timeZoneSelect .btn-timeZone {
                display: -webkit-inline-flex;
                display: -moz-inline-flex;
                display: -ms-inline-flex;
                display: -o-inline-flex;
                display: inline-flex;
                justify-content: center;
                -ms-align-items: center;
                align-items: center;
                width: 88px;
                height: 30px;
                margin: 0 4px;
                font-size: 12px;
                color: transparent;
                background-color: transparent;
                border-radius: 4px;
                transition: 0.3s all;
            }

            #timeZoneSelect.active .btn-timeZone {
                color: #fff;
                background-color: #65C3DF;
            }

        .navbar {
            min-height: 65px;
            background-image: url('assets/background/nav_bg.jpg');
            background-size: cover;
            background-position: center;
        }

        ul.flex, .navLeft, .navRight {
            display: -webkit-inline-flex !important;
            display: -moz-inline-flex !important;
            display: -ms-inline-flex !important;
            display: -o-inline-flex !important;
            display: inline-flex !important;
            justify-content: space-between;
            -ms-align-items: center;
            align-items: center;
            flex-direction: inherit;
        }

            .navLeft li:last-child {
                position: absolute;
                left: 214px;
            }

            .navRight li:nth-child(1), .navRight li:nth-child(2), .navRight li:nth-child(3) {
                border-right: 1px solid #888;
                height: 30px;
            }

        .navRight {
            margin-right: 12px;
        }
        /*.navbar ul.nav li{position: absolute; top: 50%; transform: translateY(-50%);}*/
        /*.navbar ul.nav li:nth-child(2){left: 150px;}
        .navbar ul.nav li:nth-child(3){right: 340px; border-right: 1px solid #888; height: 30px;}
        .navbar ul.nav li:nth-child(3) p{margin: 0;}
        .navbar ul.nav li:nth-child(4){right: 290px; border-right: 1px solid #888; height: 30px;}
        .navbar ul.nav li:nth-child(5){right: 242px; border-right: 1px solid #888; height: 30px;}
        .navbar ul.nav li:nth-child(6){right: 52px;}
        .navbar ul.nav li:nth-child(7){right: 6px; border-left: 1px solid #888; height: 30px;}*/
        .copyright {
            position: absolute;
            left: 28px;
            bottom: 12px;
            transition: 0.2s all;
        }

        body .copyright p {
            margin: 0;
            font-size: 12px;
            color: #eee;
        }

        body.theme-cyan.menu_sm .copyright {
            left: 4px;
            transition: 0.2s all;
        }

        body.theme-cyan.menu_sm .profile-photo {
            width: 52px;
            height: 52px;
            border-width: 2px;
            transition: 0.2s all;
        }

        body.theme-cyan.menu_sm .account p {
            display: none;
        }

        section.content {
            margin: 65px 0px 0 250px;
            background-color: #f5f5f5;
            border-radius: 0;
        }

        .container-fluid > .row {
            padding: 12px 0;
        }

        .dd-handle {
            background: none;
            border: 0;
        }

            .dd-handle:hover {
                color: #45B6B0;
            }

        ol.dd-list > li.dd-item > ol.dd-list > li.dd-item > .dd-handle {
            color: #575b61;
            padding-left: 24px;
        }

        ol.dd-list > li.dd-item > ol.dd-list > li.dd-item:before {
            content: '';
            position: absolute;
            left: 0;
            top: -5px;
            width: 1px;
            height: calc(100% + 10px);
            height: -moz-calc(100% + 10px);
            height: -webkit-calc(100% + 10px);
            border-left: 0.5px solid #ddd;
        }

        .divCompanyTree > ol.dd-list > li.dd-item {
            /*border-bottom: 1px solid #ddd;*/
            margin: 6px 0;
        }

        li.dd-item {
            padding: 0 12px;
        }

            li.dd-item > button {
                position: absolute;
                left: 10px;
            }

        .divCompanyTree > ol.dd-list > li.dd-item:last-child {
            border: 0;
        }

        .divCompanyTree > ol.dd-list > li.dd-item > .dd-handle {
            font-weight: bold;
            font-size: 15px;
            padding-left: 24px;
        }

        .theme-cyan .sidebar .menu .list {
            padding: 0;
        }

            .theme-cyan .sidebar .menu .list > li {
                padding: 0;
                margin: 4px 12px;
            }
            /*.theme-cyan .sidebar .menu .list li ul li{padding: 0 12px;}*/
            .theme-cyan .sidebar .menu .list li a:hover {
                background-color: rgba(0,0,0,0.2);
            }

            .theme-cyan .sidebar .menu .list li ul {
                background: rgba(0,0,0,0.35);
            }

            .theme-cyan .sidebar .menu .list li a:hover {
                color: #fff;
            }
        /*.strongtitle{color: #6f7884; font-size: 22px;}*/
        .col-lg-7.col-md-7.col-sm-7 > p {
            margin: 0;
        }

        .block-header {
            padding: 0 64px;
            margin-bottom: 16px;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }

            .block-header h2 {
                color: #565d67;
                font-weight: bold;
            }

            .block-header .col {
                padding: 16px;
            }

                .block-header .col.col-lg-9.col-md-9.col-sm-9 {
                    display: -webkit-inline-flex;
                    display: -moz-inline-flex;
                    display: -ms-inline-flex;
                    display: -o-inline-flex;
                    display: inline-flex;
                    -ms-align-items: center;
                    align-items: center;
                    border-left: 1px dashed #ddd;
                }

        .tips {
            font-size: 12px;
            color: #565d67;
            padding-left: 12px;
        }

        #divtree {
            padding: 0 24px;
        }

        @@media screen and (min-width: 1600px) {
            #divtree {
                padding: 0 56px;
            }
        }

        .divtreeTool {
            font-size: 0;
        }

            .divtreeTool button {
                width: calc((100% - 6px * 2)/ 3 );
                margin: 0 6px 6px 0;
                font-size: 12px;
            }

                .divtreeTool button:last-child {
                    margin-right: 0;
                }

            .divtreeTool .btn-divtreeTool {
                padding: 12px 0;
            }

        .paper-wrap:before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            border-width: 0 42px 42px 0;
            border-style: solid;
            border-color: #ffffff #253856;
            -webkit-box-shadow: 0 0 0 rgba(0, 0, 0, 0.4), 0 0 10px rgba(0, 0, 0, 0.3);
            -moz-box-shadow: 0 0 0 rgba(0, 0, 0, 0.4), 0 0 10px rgba(0, 0, 0, 0.3);
            box-shadow: 0 0 0 rgba(0, 0, 0, 0.4), 0 0 10px rgba(0, 0, 0, 0.3);
            -webkit-transform: rotate(-90deg);
            -moz-transform: rotate(-90deg);
            -ms-transform: rotate(-90deg);
            -o-transform: rotate(-90deg);
            filter: progid: DXImageTransform.Microsoft.BasicImage(rotation=3);
        }

        .card .header .row .col-lg-7.col-md-7.col-sm-7 {
            display: -webkit-flex;
            display: -moz-flex;
            display: -ms-flex;
            display: -o-flex;
            display: flex;
            -ms-align-items: center;
            align-items: center;
        }

        table {
            font-size: 14px !important;
            color: #575b61 !important;
        }

        .card .body {
            font-size: 14px !important;
            color: #575b61 !important;
            padding: 0 20px !important;
        }

            .card .body .row, #divCompanyPoint.card .body {
                margin: 0 0 8px 0;
            }

        /*.card.wallet {
            width: 120px;
        }*/

        .footer {
            padding: 16px 0;
        }
        /*.theme-cyan .card .header h2:before{background: #45B6B0; top: -17px;}*/
        .ortherText button {
            margin: 0 8px;
        }

        .theme-cyan .btn-primary {
            background: #65C3DF;
        }

        .dataTables_wrapper input[type="search"]:focus, .dataTables_wrapper input[type="search"]:active {
            border-bottom: 2px solid #65C3DF;
        }

        div.dataTables_wrapper div.dataTables_paginate ul.pagination {
            margin: 16px 0 8px;
        }


        .theme-cyan .btn-primary:active, .theme-cyan .btn-primary:hover, .theme-cyan .btn-primary:focus {
            background: #45B6B0;
        }

        .sorting_1:focus {
            outline: 0;
        }

        .btn-primary:not(:disabled):not(.disabled).active, .btn-primary:not(:disabled):not(.disabled):active, .show > .btn-primary.dropdown-toggle {
            background-color: #446288;
        }

        button.btn-circle {
            width: 36px;
            height: 36px;
            padding: 0;
            border-radius: 50%;
            line-height: 36px;
        }

        button.btn-round {
            padding: 9px 24px;
        }

        table.dataTable.dtr-inline.collapsed > tbody > tr[role="row"] > td:first-child:before, table.dataTable.dtr-inline.collapsed > tbody > tr[role="row"] > th:first-child:before {
            background-color: #65C3DF;
        }

        footer.footer {
            text-align: right;
            padding: 0;
            background-color: #fff;
            border-top: 1px solid #ccc;
        }

            footer.footer p {
                display: inline-block;
                margin: 0 20px 0 0;
                font-size: 12px;
                color: #aaa;
            }

        [data-notify="container"][class*="alert-pastel-"] {
            background-color: rgb(255, 255, 238);
            border-width: 0px;
            border-left: 15px solid rgb(255, 240, 106);
            border-radius: 0px;
            box-shadow: 0px 0px 5px rgba(51, 51, 51, 0.3);
            font-family: 'Old Standard TT', serif;
            letter-spacing: 1px;
            opacity: 0.9;
            width: 90%;
        }

        [data-notify="container"].alert-pastel-info {
            border-left-color: rgb(255, 179, 40);
        }

        [data-notify="container"].alert-pastel-danger {
            border-left-color: rgb(255, 103, 76);
        }

        [data-notify="container"][class*="alert-pastel-"] > [data-notify="title"] {
            color: rgb(80, 80, 57);
            display: block;
            font-weight: 700;
            margin-bottom: 5px;
        }

        [data-notify="container"][class*="alert-pastel-"] > [data-notify="message"] {
            font-weight: 400;
            color: black;
        }

        .alert .close {
            color: black !important;
            margin-right: 20px;
        }

        .selectedItem {
            /*color: forestgreen;*/
            /*background: #DDDDDD;*/
            border-color: black;
        }

            .selectedItem:hover {
                /*color: forestgreen;*/
                /*background: #DDDDDD;*/
            }

        .dd-handle:hover {
            cursor: pointer;
        }

        table .selected {
            background-color: #a2aec7 !important;
        }

        .show > .dropdown-toggle {
            /*color: #fff !important;*/
        }

        .table-responsive > div > table {
            width: 100%;
        }

        .dtr-data {
            word-break: normal;
            width: auto;
            display: block;
            white-space: pre-wrap;
            word-wrap: break-word;
            overflow: hidden;
        }


        .divDetailData .card {
            background-color: #fff;
        }

        .divDetailData > .card > .header {
            padding: 12px 16px;
            margin-bottom: 30px;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }

        .divPointDetail {
            font-size: 0;
            white-space: nowrap;
        }

            .divPointDetail .footer {
                padding: 0;
            }

            .divPointDetail .card.wallet {
                border-right: 1px solid rgba(0,0,0,0.1) !important;
                margin-bottom: 30px;
                border-radius: 0;
            }

                .divPointDetail .card.wallet:last-child {
                    border-right: 0;
                }

            .divPointDetail .card.wallet {
                background: none;
                box-shadow: none;
            }

                .divPointDetail .card.wallet .header {
                    padding: 4px 20px 8px;
                }

                .divPointDetail .card.wallet h2:before {
                    width: 16px;
                    height: 2px;
                    top: -4px;
                }

                .divPointDetail .card.wallet p.text-muted, .divPointDetail .card.wallet p.wallettext-muted {
                    color: #6f7884 !important;
                    margin: 0;
                    white-space: pre-wrap;
                    font-size: 18px;
                }


        .table-responsive table th {
            font-weight: normal;
        }

        .zmdi-refresh:hover {
            cursor: pointer;
        }
    </style>
</head>

<link href="~/Backend/assets/css/dataTables.checkboxes.css" rel="stylesheet" />
<script src="~/Backend/assets/js/dataTables.checkboxes.min.js"></script>
<script src="~/Backend/assets/js/xlsx.core.min.js"></script>

<style>
    .dropdown-menu {
        max-height: 300px !important;
    }

    .checkbox > label {
        padding-bottom: 10px;
    }
</style>
<body class="theme-cyan">
    <div class="block-header paper-wrap">
        <div class="row">
            <div class="col col-lg-3 col-md-3 col-sm-3">
                <h2>提现申请</h2>
            </div>
            <div class="col col-lg-9 col-md-9 col-sm-9">
                <div class="tips">
                    <span></span>
                </div>
            </div>

        </div>
    </div>

    <div class="container-fluid">
        <!-- 商户钱包-->
        <div id="divCompanyPoint" class="row clearfix">
            <div class="col-lg-12 divDetailData">
                <div class="card">
                    <div class="header">
                        <h2 style="display:inline-block"><strong>钱包资料</strong></h2> <i class="zmdi zmdi-refresh" onclick="ShowCompanyPoint()"></i>
                    </div>
                    <div class="body">
                        <div class="row clearfix divPointDetail">
                            <div id="divCompanyPointDetail" style="width:25%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row clearfix">
            <div class="col-lg-12">
                <div class="card">
                    <div class="header">
                        <h2><strong>支付通道资讯</strong></h2>
                    </div>
                    <div class="body">
                        <div class="table-responsive" id="div_table_CompanyServicePointTable">
                            <table style="width:100%" class="table table-bordered table-striped table-hover dataTable nowrap" id="table_CompanyServicePointTable"></table>
                        </div>
                    </div>

                </div>
            </div>
        </div>


        <!-- Basic Examples -->
        <div class="row clearfix">
            <div class="col-lg-12">
                <div class="card">
                    <div class="header">
                        <div class="row">

                            <div class="col col-lg-12 col-md-12 col-sm-12 ortherText">

                                <label> Excel上传 : </label>
                                <input type="file" id="input_Excel" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" />
                                <button id="btndelete" type="button" class="btn btn-raised btn-round waves-effect float-right">全部删除</button>
                                <button id="Excel_download" type="button" class="btn btn-raised btn-round waves-effect float-right">Excel格式下载</button>
                                @*<button id="Excel_download" type="button" class="btn btn-raised btn-round waves-effect float-right">Excel格式下载</button>*@
                                <button style="display:none" id="btnadd" type="button" class="btn btn-raised btn-primary btn-round waves-effect float-right">单笔新增</button>
                                <button id="btnconfirm" type="button" class="btn btn-raised btn-primary btn-round waves-effect float-right">确认申请</button>
                            </div>
                        </div>
                    </div>
                    <div class="body">
                        <div class="row">
                            <h6 style="margin-left: 15px;margin-top: 3px;margin-bottom: 0px;margin-right: 3px;"> 提现总计额度 : </h6>
                            <span id="sum_PointValue"></span>
                            <h6 style="margin-left: 15px;margin-top: 3px;margin-bottom: 0px;margin-right: 3px;"> 通道提现总计额度 : </h6>
                            <span id="sum_ServicePointValue"></span>
                        </div>
                        <div class="table-responsive" id="div_table_WithdrawalTable">
                            <table style="width:100%" class="table table-bordered table-striped table-hover dataTable nowrap" id="table_WithdrawalTable"></table>
                        </div>
                    </div>

                </div>
            </div>
        </div>
        <!-- #END# Basic Examples -->

    </div>

    <div class="modal fade" style="background-color: rgba(0, 0, 0, 0.4);" data-backdrop=false id="WithdrawalCreateModal" tabindex="-1" role="dialog" aria-hidden="true">

        <div class="modal-dialog" role="document">

            <div class="modal-content">

                <div class="modal-header">

                    <h4 class="title">提现申请</h4>

                </div>
                <div class="modal-body">
                    <label>选择银行卡</label>
                    <select class="form-control show-tick" id="select_BankCard"></select>
                    <div style="display:none">
                        <label>选择币别</label><label id="showPointValue" style="color:red;margin-left:5px"></label>
                        <select class="form-control show-tick" id="select_CurrencyType"></select>
                    </div>
                    <label style="margin-top:5px">通道名称 : <span id="WithdrawalCreateModal_ServiceTypeName"></span></label><br />
                    <label>通道可用额度 : <span style="color:red" id="WithdrawalCreateModal_ServiceTypePoint"></span> 限额: <span style="color:red" id="WithdrawalCreateModal_MaxLimit"></span> 手续费: <span style="color:red" id="WithdrawalCreateModal_Charge"></span></label><br />

                    <input style="display:none" type="text" id="WithdrawalCreateModal_ServiceType" class="form-control">
                    <input style="display:none" type="text" id="WithdrawalCreateModal_WithdrawID" class="form-control">
                    <label for="WithdrawalCreateModal_BankName">银行名称 : </label>
                    <div class="form-group">
                        <input type="text" id="WithdrawalCreateModal_BankName" class="form-control">
                    </div>
                    <label for="WithdrawalCreateModal_BankBranchName">支行名称 : </label>
                    <div class="form-group">
                        <input type="text" id="WithdrawalCreateModal_BankBranchName" class="form-control">
                    </div>
                    <label for="WithdrawalCreateModal_BankCardName">持卡人姓名 : </label>
                    <div class="form-group">
                        <input type="text" id="WithdrawalCreateModal_BankCardName" class="form-control">
                    </div>
                    <label for="WithdrawalCreateModal_OwnProvince">省份 : </label>
                    <div class="form-group">
                        <input type="text" id="WithdrawalCreateModal_OwnProvince" class="form-control">
                    </div>
                    <label for="WithdrawalCreateModal_OwnCity">城市 : </label>
                    <div class="form-group">
                        <input type="text" id="WithdrawalCreateModal_OwnCity" class="form-control">
                    </div>
                    <label for="WithdrawalCreateModal_BankCard">卡号 : </label>
                    <div class="form-group">
                        <input type="text" id="WithdrawalCreateModal_BankCard" class="form-control">
                    </div>

                    <label for="WithdrawalCreateModal_Amount">金额 : </label>
                    <div class="form-group">
                        <input type="text" id="WithdrawalCreateModal_Amount" class="form-control thousand-symbols">
                    </div>

                </div>
                <div class="modal-footer">
                    <button onclick="WithdrawalCreateModal_Confirm()" type="button" class="btn btn-primary btn-round waves-effect">确认</button>
                    <button onclick="WithdrawalCreateModal_Cancel()" type="button" class="btn btn-primary btn-round waves-effect">取消</button>
                </div>

            </div>

        </div>

    </div>
</body>
<script>
    var Table;
    var CompanyServicePointTable;
    var companyPointData;
    var bankCardData;
    var modifyType;
    var companyServicePointResult;

    $(document).ready(function () {
        pageLoad();
    });

    function pageLoad() {
        if ('@CheckLoginPermission' == 'false') {
                location.href = "Login.cshtml";
            }

        if ('@CheckPermission' == 'false') {
            parent.errorAlertCallback("权限不足", function () {
                parent.GoPage("Home");
                parent.CloseActivePage(window.frameElement.id.split('_')[1]);
            });
        }

        AdminObject = parent.AdminObject;
        api = parent.api;

        //取得單筆提現資訊
        getBankCardSelect();
        getCurrencyTypeSelect();

        new AutoNumeric.multiple('.thousand-symbols', 'floatPos', { allowDecimalPadding: false, decimalPlaces: 4, modifyValueOnWheel: false });
        ShowCompanyPoint();
        createCompanyServicePointTable();
        setInterval("getCompanyServicePointResult()", 20000);
        setInterval("ShowCompanyPoint2()", 20000);
        parent.wrapperFadeOut();
    };

    function getCompanyServicePointResult() {

        api.getCanUseCompanyServicePoint(function (success, obj) {

            if (obj.ResultCode == 0) {
                companyServicePointResult = obj.CompanyServicePoints;

                CompanyServicePointTable.clear();
                CompanyServicePointTable.rows.add(companyServicePointResult).draw();
            } else {
                switch (obj.ResultCode) {
                    case 4:
                        parent.errorAlertCallback("权限不足", function () {
                            parent.ChangePage("Home");
                            parent.CloseActivePage(window.frameElement.id.split('_')[1]);
                        });
                        break;
                    case 5:
                        //warningAlert("沒有資料");
                        break;
                    case 7:
                        parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                        break;
                    default:
                        parent.warningAlert("其他错误");
                        break;
                }

                parent.wrapperFadeOut();
            }
        });
    }

    function getWithdrawalResult() {

        api.getWithdrawalTableResultByCompanyID(function (success, obj) {

            if (obj.ResultCode == 0) {
                Table.rows.add(obj.WithdrawalResults).draw(false);
                //if (obj.WithdrawalResults.length > 0) {
                //    CalculationPoint();
                //}
            } else {
                switch (obj.ResultCode) {
                    case 4:
                        parent.errorAlertCallback("权限不足", function () {
                            parent.ChangePage("Home");
                            parent.CloseActivePage(window.frameElement.id.split('_')[1]);
                        });
                        break;
                    case 5:
                        //warningAlert("沒有資料");
                        break;
                    case 7:
                        parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                        break;
                    default:
                        parent.warningAlert("其他错误");
                        break;
                }

                parent.wrapperFadeOut();
            }
        });
    }

    function createCompanyServicePointTable() {

        CompanyServicePointTable = $("#table_CompanyServicePointTable").DataTable({
            columns: [
                {
                    "title": "支付方式", "data": "ServiceTypeName"
                },
                {
                    "title": "通道代码", "data": "ServiceType"
                },
                {
                    "title": "提领金额下限", "data": "MinLimit",
                    "render": function (data, display, rowdata) {
                        return toCurrency(data);
                    }
                },
                {
                    "title": "提领金额上限", "data": "MaxLimit",
                    "render": function (data, display, rowdata) {
                        return toCurrency(data);
                    }
                },
                {
                    "title": "手续费", "data": "Charge",
                    "render": function (data) {
                        return toCurrency(data);
                    }
                },
                {
                    "title": "渠道金额", "data": "SystemPointValue",
                    "render": function (data) {
                        return '<span style="color:orange">' + toCurrency(data) + '</span>';
                    }
                },
                {
                    "title": "可用金额", "data": "CanUsePoint",
                    "render": function (data, display, rowdata) {
                        return '<span style="color:green">' + toCurrency(data - rowdata.FrozenPoint) + '</span>';
                    }
                },
                {
                    "title": "不可用金额", "data": "SystemPointValue",
                    "render": function (data, display, rowdata) {
                        return '<span style="color:red">' + toCurrency(data - rowdata.CanUsePoint) + '</span>';
                    }
                },
                {
                    "title": "冻结金额", "data": "FrozenPoint",
                    "render": function (data) {
                        return '<span style="color:blue">' + toCurrency(data) + '</span>';
                    }
                },
                {
                    "title": "操作", "data": "ServiceType",
                    "render": function (data, display, rowdata) {
                        //withdrawalCreate(serviceType, serviceTypeName, amount)
                        return '<button data-servicetype="' + data + '" data-servicetype="' + rowdata.ServiceType + '" onclick="withdrawalCreate(this)">申请提现</button>';
                    }
                }
            ],
            rowCallback: function (row, data) { },
            filter: true,
            info: false,
            ordering: true,
            processing: true,
            retrieve: true,
            selected: true,
            scrollX: true,
            'order': [[6, 'desc']],
            autoWidth: false,
            language: chineseTableLang
        });

        getCompanyServicePointResult();

    }

    function withdrawalCreate(btnobj) {
        var serviceType = $(btnobj).data('servicetype');
        getCanUseCompanyServicePointByService(serviceType, function (data) {
            withdrawalCreateModalAdd(data);
        });
    }

    function getCanUseCompanyServicePointByService(serviceType,cb) {

        api.getCanUseCompanyServicePointByService(serviceType,function (success, obj) {

            if (obj.ResultCode == 0) {
                cb(obj.CompanyServicePoint);

            } else {
                switch (obj.ResultCode) {
                    case 4:
                        parent.errorAlertCallback("权限不足", function () {
                            parent.ChangePage("Home");
                            parent.CloseActivePage(window.frameElement.id.split('_')[1]);
                        });
                        break;
                    case 5:
                        parent.warningAlert("取得渠道资讯失败");
                        break;
                    case 7:
                        parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                        break;
                    default:
                        parent.warningAlert("其他错误");
                        break;
                }

                parent.wrapperFadeOut();
            }
        });
    }

    function getCanUseCompanyPoint(cb) {

        api.getCompanyPointTableResult(AdminObject.forCompanyID, function (success, obj) {

            if (obj.ResultCode == 0) {
                cb(obj.CompanyPoints);

            } else {
                switch (obj.ResultCode) {
                    case 4:
                        parent.errorAlertCallback("权限不足", function () {
                            parent.ChangePage("Home");
                            parent.CloseActivePage(window.frameElement.id.split('_')[1]);
                        });
                        break;
                    case 5:
                        parent.warningAlert("取得渠道资讯失败");
                        break;
                    case 7:
                        parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                        break;
                    default:
                        parent.warningAlert("其他错误");
                        break;
                }

                parent.wrapperFadeOut();
            }
        });
    }



    function createWithdrawalTable() {

        Table = $("#table_WithdrawalTable").DataTable({
            'columnDefs': [
                {
                    'targets': 0,
                    'render': function (data, type, row, meta) {
                        if (type === 'display') {
                            data = '<div class="checkbox"><input data-id="' + data + '" type="checkbox" class="dt-checkboxes" name="checkbox_select" onchange="checkbox_select(this)"><label></label></div>';
                        }

                        return data;
                    },
                    'checkboxes': {
                        'selectRow': true,
                        'selectAllRender': '<div class="checkbox"><input type="checkbox" class="dt-checkboxes" onchange="selectAll(this)"><label></label></div>'
                    }
                }
            ],
            'select': 'multi',
            'order': [[1, 'asc']],
            columns: [
                { "title": "", "data": "WithdrawID" },
                { "title": "银行名称", "data": "BankName" },
                { "title": "支行名称", "data": "BankBranchName" },
                { "title": "持卡人姓名", "data": "BankCardName" },
                { "title": "省份", "data": "OwnProvince" },
                { "title": "城市", "data": "OwnCity" },
                { "title": "卡号", "data": "BankCard" },
                { "title": "取款通道", "data": "ServiceTypeName" },
                { "title": "币别", "data": "CurrencyType", "visible": false },
                {
                    "title": "金额", "data": "Amount",
                    "render": function (data, display, rowdata) {
                        return toCurrency(data);
                    }
                },
                {
                    "title": "手续费", "data": "CollectCharge",
                    "render": function (data, display, rowdata) {
                        return data;
                    }
                },
                {
                    "title": "原因", "data": "RejectDescription"
                },
                {
                    "title": "", "data": "",
                    "render": function (data, display, rowdata) {
                        return '<button onclick="removerow(this,' + rowdata.WithdrawID + ')">删除</button>' + '<button style="margin-left:5px" onclick="editrow(this,' + rowdata.WithdrawID + ')">修改</button>';
                    }
                },
            ],
            rowCallback: function (row, data) { },
            filter: true,
            info: false,
            ordering: true,
            processing: true,
            retrieve: true,
            selected: true,
            scrollX: true,
            order: [[8, "desc"]],
            autoWidth: false,
            language: chineseTableLang
        });

        getWithdrawalResult();

    }

    function selectAll(obj) {
        var checked = $(obj).prop("checked");
        var tableInfo = Table.page.info();
        var startRowIndex = tableInfo.start;
        var endRowIndex = tableInfo.end;
        for (var i = startRowIndex; i < endRowIndex; i++) {
            Table.rows().data()[i].Checked = checked;
            $('input[type="checkbox"][data-id=' + Table.rows().data()[i].WithdrawID + ']').prop('checked', checked);
        }
        CalculationPoint();
    }


    function checkbox_select(obj) {
        var checked = $(obj).prop("checked");
        var withdrawID = $(obj).attr('data-id');
        rowChecked(withdrawID, checked);
    }

    function rowChecked(withdrawID, checked) {
        var index = -1;
        var row = Table.row(function (idx, data, node) {
            if (data.WithdrawID == withdrawID) {
                index = idx;
                return this;
            }
        });

        if (checked) {
            row.data().Checked = true;
        } else {
            row.data().Checked = false;
        }

        CalculationPoint();
    }

    function withdrawalCreateModalAdd(companyServicePointData) {

        var serviceTypeName = companyServicePointData.ServiceTypeName;
        var systempointvalue = companyServicePointData.CanUsePoint - companyServicePointData.FrozenPoint;
        var servicetype = companyServicePointData.ServiceType;
        var minlimit = companyServicePointData.MinLimit;
        var maxlimit = companyServicePointData.MaxLimit;
        var charge = companyServicePointData.Charge;
        modifyType = "add";
        //清空欄位
        $("#select_BankCard").val("0");
        $("#select_CurrencyType").val("0");
        $('#WithdrawalCreateModal_ServiceTypeName').text(serviceTypeName);
        $('#WithdrawalCreateModal_ServiceTypePoint').text(systempointvalue);
        $('#WithdrawalCreateModal_ServiceType').val(servicetype);
        $('#WithdrawalCreateModal_MaxLimit').text(`${minlimit}~${maxlimit}`);
        $('#WithdrawalCreateModal_Charge').text(charge);

        $('#select_BankCard').selectpicker('refresh');
        $('#select_CurrencyType').selectpicker('refresh');
        $('#WithdrawalCreateModal_BankName').val('');
        $('#WithdrawalCreateModal_BankBranchName').val('');
        $('#WithdrawalCreateModal_BankCardName').val('');
        $('#WithdrawalCreateModal_OwnProvince').val('');
        $('#WithdrawalCreateModal_OwnCity').val('');
        $('#WithdrawalCreateModal_BankCard').val('');
        $('#WithdrawalCreateModal_Amount').val('');
        //彈出視窗
        $('#WithdrawalCreateModal').css('display', 'block');
        $('#WithdrawalCreateModal').css('overflow-x', 'hidden');
        $('#WithdrawalCreateModal').css('overflow-y', 'auto');
        $('#WithdrawalCreateModal').css('opacity', 1);
        $('#WithdrawalCreateModal .modal-content').css('margin-top', '250px');
    }

    $('#btnadd').click(function () {
        modifyType = "add";
        //清空欄位
        $("#select_BankCard").val("0");
        $("#select_CurrencyType").val("0");

        $('#select_BankCard').selectpicker('refresh');
        $('#select_CurrencyType').selectpicker('refresh');
        $('#WithdrawalCreateModal_BankName').val('');
        $('#WithdrawalCreateModal_BankBranchName').val('');
        $('#WithdrawalCreateModal_BankCardName').val('');
        $('#WithdrawalCreateModal_OwnProvince').val('');
        $('#WithdrawalCreateModal_OwnCity').val('');
        $('#WithdrawalCreateModal_BankCard').val('');
        $('#WithdrawalCreateModal_Amount').val('');
        //彈出視窗
        $('#WithdrawalCreateModal').css('display', 'block');
        $('#WithdrawalCreateModal').css('overflow-x', 'hidden');
        $('#WithdrawalCreateModal').css('overflow-y', 'auto');
        $('#WithdrawalCreateModal').css('opacity', 1);
        $('#WithdrawalCreateModal .modal-content').css('margin-top', '250px');
    })

    function modifyWithdrawal(rowdata) {

        getCanUseCompanyServicePointByService(rowdata.ServiceType, function (returnValue) {

            modifyType = "update";
            //清空欄位
            $("#WithdrawalCreateModal_WithdrawID").val(rowdata.WithdrawID);
            $('#WithdrawalCreateModal_ServiceTypeName').text(returnValue.ServiceTypeName);
            $('#WithdrawalCreateModal_ServiceTypePoint').text(returnValue.CanUsePoint - returnValue.FrozenPoint + rowdata.Amount + rowdata.CollectCharge);
            $('#WithdrawalCreateModal_MaxLimit').text(`${returnValue.MinLimit}~${returnValue.MaxLimit}`);
            $('#WithdrawalCreateModal_Charge').text(returnValue.Charge);
            $('#WithdrawalCreateModal_ServiceType').val(rowdata.ServiceType);
            $("#select_BankCard").val("0");
            $("#select_CurrencyType").val(rowdata.CurrencyType);
            $('#select_BankCard').selectpicker('refresh');
            $('#select_CurrencyType').selectpicker('refresh');
            var options = $('#select_CurrencyType option:selected');
            var pointvalue = options.attr('data-point');
            $('#showPointValue').text("    (可提领金额 : " + toCurrency(returnValue.CanUsePoint - returnValue.FrozenPoint) + ")");
            $('#WithdrawalCreateModal_BankName').val(rowdata.BankName);
            $('#WithdrawalCreateModal_BankBranchName').val(rowdata.BankBranchName);
            $('#WithdrawalCreateModal_BankCardName').val(rowdata.BankCardName);
            $('#WithdrawalCreateModal_OwnProvince').val(rowdata.OwnProvince);
            $('#WithdrawalCreateModal_OwnCity').val(rowdata.OwnCity);
            $('#WithdrawalCreateModal_BankCard').val(rowdata.BankCard);
            $('#WithdrawalCreateModal_Amount').val(toCurrency(rowdata.Amount));
            //彈出視窗
            $('#WithdrawalCreateModal').css('display', 'block');
            $('#WithdrawalCreateModal').css('overflow-x', 'hidden');
            $('#WithdrawalCreateModal').css('overflow-y', 'auto');
            $('#WithdrawalCreateModal').css('opacity', 1);
            $('#WithdrawalCreateModal .modal-content').css('margin-top', '250px');

        });


    }

    function CreateWithdrawalStatusSelect() {
        //流程狀態，0=建立/1=進行中/2=成功/3=失敗/99=全部
        $("#select_Status").children().remove();
        $("#select_Status").append('<option value="99">全部</option>');
        $("#select_Status").append('<option value="0">建立</option>');
        $("#select_Status").append('<option value="1">进行中</option>');
        $("#select_Status").append('<option value="2">成功</option>');
        $("#select_Status").append('<option value="3">失败</option>');
        $('#select_Status').selectpicker('refresh');

    }

    function setDateInput() {

        $("#startdate").inputmask('yyyy/mm/dd', { placeholder: '____/__/__' });
        $("#enddate").inputmask('yyyy/mm/dd', { placeholder: '____/__/__' });
        var today = new Date();

        var year = today.getFullYear().toString();
        var month = (today.getMonth() + 1) < 10 ? "0" + (today.getMonth() + 1).toString() : (today.getMonth() + 1).toString();
        var date = today.getDate() < 10 ? "0" + (today.getDate().toString()).toString() : today.getDate().toString();

        $("#startdate").val(year + month + date);
        $("#enddate").val(year + month + date);
        setSelectDateText();
        $("#startdate").bootstrapMaterialDatePicker({ weekStart: 0, time: false, switchOnClick: true, lang: 'zh-tw' });
        $("#enddate").bootstrapMaterialDatePicker({ weekStart: 0, time: false, switchOnClick: true, lang: 'zh-tw' });
    }

    function setSelectDateText() {
        moment.locale('zh-tw', {
            months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
            monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
            weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
            weekdaysShort: '日_一_二_三_四_五_六'.split('_'),
            weekdaysMin: '日_一_二_三_四_五_六'.split('_')
        });
    }

    $("#input_Excel").change(function () {
        if (this.files && this.files[0]) {
            var deputyName = $("#input_Excel").val().split('.').pop();
            if (deputyName == 'xls' || deputyName == 'xlsx' || deputyName == 'csv') {
                var reader = new FileReader();
                reader.readAsArrayBuffer(this.files[0]);
                reader.onload = function (e) {
                    loadExcel(e.target.result);
                }
            } else {
                this.value = '';
                parent.warningAlert("档案类型错误");
            }

        }
    });

    function loadExcel(data) {
        var boolcheckExcel = false;
        var workbook = XLSX.read(data, { type: 'buffer' });
        var checkHeader = ["银行名称", "支行名称", "持卡人姓名", "省份", "城市", "卡号", "通道代码", "金额"];
        console.log(workbook);
        var sheetNames = workbook.SheetNames; // 工作表名称集合
        var worksheet = workbook.Sheets[sheetNames[0]]; // 这里我们只读取第一张sheet
        var headerRow = getHeaderRow(worksheet);

        var JsonObj = XLSX.utils.sheet_to_json(worksheet, { defval: '' });
        if (JsonObj.length > 0) {
            if (headerRow.length == checkHeader.length) {
                if (headerRow.sort().toString() == checkHeader.sort().toString()) {
                    boolcheckExcel = true;
                }
            }
        }
        $("#input_Excel").val('');
        if (boolcheckExcel) {
            readWorkbook(JsonObj);
        } else {
            parent.warningAlert("Excel格式不符,请使用提供的Excel档案");
        }

    }

    function readWorkbook(JsonObj) {
        ExcelCheckCalculationPoint(JsonObj);

    }

    function getCompanyServicePointByServiceType(serviceType, currencyType) {

        var index = -1;
        var row = CompanyServicePointTable.row(function (idx, data, node) {
            if (data.ServiceType == serviceType && data.CurrencyType == currencyType) {
                index = idx;
                return this;
            }
        });

        return row.data();

    }

    function getBankCardSelect() {
        api.getBankCardTableResult(AdminObject.forCompanyID, function (success, obj) {

            if (obj.ResultCode == 0) {
                bankCardData = obj.BankCardResults;
                $("#select_BankCard").children().remove();
                $("#select_BankCard").append('<option value="0"> -- 请选择银行卡 -- </option>');
                $.each(obj.BankCardResults, function (i, item) {
                    $("#select_BankCard").append('<option value="' + obj.BankCardResults[i].BankCard + '">' + "[ " + obj.BankCardResults[i].BankName + " ] " + obj.BankCardResults[i].BankCardName + " ( 卡号:" + obj.BankCardResults[i].BankCard + " ) " + '</option>');
                })
                $('#select_BankCard').selectpicker('refresh');

                //綁定 change 事件
                $('#select_BankCard').change(function () {
                    if ($(this).val() == 0) {

                        $('#WithdrawalCreateModal_BankName').val('');
                        $('#WithdrawalCreateModal_BankBranchName').val('');
                        $('#WithdrawalCreateModal_BankCardName').val('');
                        $('#WithdrawalCreateModal_OwnProvince').val('');
                        $('#WithdrawalCreateModal_OwnCity').val('');
                        $('#WithdrawalCreateModal_BankCard').val('');
                        $('#WithdrawalCreateModal_Amount').val('');
                    } else {
                        if (bankCardData) {
                            var selectedBankCardData = bankCardData.find(function (element) {
                                return element.BankCard == $('#select_BankCard').val();
                            })

                            $('#WithdrawalCreateModal_BankName').val(selectedBankCardData.BankName);
                            $('#WithdrawalCreateModal_BankBranchName').val(selectedBankCardData.BankBranchName);
                            $('#WithdrawalCreateModal_BankCardName').val(selectedBankCardData.BankCardName);
                            $('#WithdrawalCreateModal_OwnProvince').val(selectedBankCardData.OwnProvince);
                            $('#WithdrawalCreateModal_OwnCity').val(selectedBankCardData.OwnCity);
                            $('#WithdrawalCreateModal_BankCard').val(selectedBankCardData.BankCard);
                            $('#WithdrawalCreateModal_Amount').val('');
                        }

                    }
                })
            } else {
                var message = ""
                switch (obj.ResultCode) {
                    case 5:

                        break;

                    case 7:
                        parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                        break;
                    default:
                        message = "其他错误";
                        parent.warningAlert(message);
                        break;
                }
            }
        });
    }

    function getCurrencyTypeSelect() {
        api.getCompanyPointTableResult(AdminObject.forCompanyID, function (success, obj) {

            if (obj.ResultCode == 0) {
                var boolCNY = false;
                $("#select_CurrencyType").children().remove();
                //$("#select_CurrencyType").append('<option value="0"> -- 請選擇提領幣別 -- </option>');
                $.each(obj.CompanyPoints, function (i, item) {
                    if (obj.CompanyPoints[i].CurrencyType == "CNY") {
                        boolCNY = true;
                        var canUsePoint = obj.CompanyPoints[i].PointValue - obj.CompanyPoints[i].LockPointValue - obj.CompanyPoints[i].FrozenPoint;
                        $("#select_CurrencyType").append('<option data-point=' + canUsePoint + ' value="' + obj.CompanyPoints[i].CurrencyType + '">' + obj.CompanyPoints[i].CurrencyType + '</option>');
                        $('#showPointValue').text("    (可提领金额 : " + toCurrency(canUsePoint) + ")");
                    }
                })
                if (!boolCNY) {
                    parent.errorAlertCallback("尚未拥有可提领钱包,请联系客服", function () {
                        parent.ChangePage("Home");
                        parent.CloseActivePage(window.frameElement.id.split('_')[1]);
                    });

                    return;
                }

                $('#select_CurrencyType').selectpicker('refresh');

                //綁定 change 事件
                $('#select_CurrencyType').change(function () {
                    if ($(this).val() == 0) {
                        $('#showPointValue').text("");
                    } else {
                        var options = $('#select_CurrencyType option:selected');
                        var pointvalue = options.attr('data-point');
                        $('#showPointValue').text("    (可提领金额 : " + toCurrency(pointvalue) + ")");
                    }
                })
            }
            else {
                var message = ""
                switch (obj.ResultCode) {
                    case 5:
                        parent.errorAlertCallback("尚未拥有可提领钱包,请联系客服", function () {
                            parent.ChangePage("Home");
                            parent.CloseActivePage(window.frameElement.id.split('_')[1]);
                        });
                        break;

                    case 7:
                        parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                        break;
                    default:
                        message = "其他错误";
                        parent.warningAlert(message);
                        break;
                }

                parent.wrapperFadeOut();
            }
        });


    }

    function WithdrawalCreateModal_Cancel() {
        closeWithdrawalCreateModal();
    }

    function closeWithdrawalCreateModal() {
        //$('#showPointValue').text("");
        $('#WithdrawalCreateModal').css('display', 'none');
        $('#WithdrawalCreateModal').css('overflow-x', 'hidden');
        $('#WithdrawalCreateModal').css('overflow-y', 'hidden');
        $('#WithdrawalCreateModal').css('opacity', 0);
        $('#WithdrawalCreateModal .modal-content').css('margin-top', '0px');
    }

    function WithdrawalCreateModal_Confirm() {
        if ($("#select_CurrencyType").val() == 0) {
            parent.warningAlert("尚未选择币别");
            return;
        }

        if ($('#WithdrawalCreateModal_BankName').val().trim() == "") {
            parent.warningAlert("银行名称为必填");
            return;
        }

        //if (simplifiedchineseCheck($('#WithdrawalCreateModal_BankName').val().trim()) == 1) {
        //    parent.warningAlert("银行名称只能有中文");
        //    return;
        //}

        if ($('#WithdrawalCreateModal_BankCardName').val().trim() == "") {
            parent.warningAlert("持卡人姓名为必填");
            return;
        }

        //if (simplifiedchineseCheck($('#WithdrawalCreateModal_BankCardName').val().trim()) == 1) {
        //    parent.warningAlert("持卡人姓名只能有中文");
        //    return;
        //}

        //if ($('#WithdrawalCreateModal_BankBranchName').val().trim() != "") {
        //    if (simplifiedchineseCheck($('#WithdrawalCreateModal_BankBranchName').val().trim()) == 1) {
        //        parent.warningAlert("支行名称只能有中文");
        //        return;
        //    }
        //}

        //if ($('#WithdrawalCreateModal_OwnProvince').val().trim() != "") {
        //    if (simplifiedchineseCheck($('#WithdrawalCreateModal_OwnProvince').val().trim()) == 1) {
        //        parent.warningAlert("省份只能有中文");
        //        return;
        //    }
        //}

        //if ($('#WithdrawalCreateModal_OwnCity').val().trim() != "") {
        //    if (simplifiedchineseCheck($('#WithdrawalCreateModal_OwnCity').val().trim()) == 1) {
        //        parent.warningAlert("城市只能有中文");
        //        return;
        //    }
        //}

        if ($('#WithdrawalCreateModal_BankCard').val().trim() == "") {
            parent.warningAlert("卡号为必填");
            return;
        }

        if ($('#WithdrawalCreateModal_Amount').val().trim() == "" || $('#WithdrawalCreateModal_Amount').val() == 0) {
            parent.warningAlert("金额为必填");
            return;
        }

        var tmpServiceCompanyPoint;

        var tmpCompanyPoint

        parent.wrapperFadeIn();
        api.getCompanyPointAndCompanyServicePointResult(function (s, o) {
            if (s) {
                if (o.ResultCode == 0) {

                    parent.wrapperFadeOut();
                    tmpCompanyPoint = o.CompanyPoints.find(function (element) {
                        return element.CurrencyType == 'CNY';
                    });

                    //总钱包检查
                    if (!tmpCompanyPoint) {
                        parent.warningAlert("取得提现额度失败");
                        return;
                    }

                    var canUsePoint = (tmpCompanyPoint.PointValue - tmpCompanyPoint.LockPointValue - tmpCompanyPoint.FrozenPoint).toFixed(4);

                    if (toNumber($('#WithdrawalCreateModal_Amount').val()) > parseFloat(canUsePoint)) {
                        var PointValue = tmpCompanyPoint.PointValue.toFixed(4);
                        var FrozenPoint = tmpCompanyPoint.FrozenPoint.toFixed(4);
                        var InWithdrawProcessPoint = tmpCompanyPoint.InWithdrawProcessPoint.toFixed(4);
                        parent.warningAlertByHtml("总钱包额度不足", `总金额:${PointValue}</br>可用金额:${canUsePoint}</br>下发处理中:${InWithdrawProcessPoint}</br>冻结金额:${FrozenPoint}`);
                        return;
                    }

                    //通道余额检查

                    tmpServiceCompanyPoint = o.CompanyServicePoints.find(function (element) {
                        return element.CurrencyType == 'CNY' && element.ServiceType == $('#WithdrawalCreateModal_ServiceType').val();
                    });
;

                        if (!tmpServiceCompanyPoint) {
                            parent.warningAlert("取得支付通道额度错误,请联系系统商");
                        }

                        if (tmpServiceCompanyPoint.MinLimit == 0 || tmpServiceCompanyPoint.MaxLimit == 0) {
                            parent.warningAlert("尚未设定提现限额,请联系系统商");
                        }


                        if (tmpServiceCompanyPoint.MinLimit > toNumber($('#WithdrawalCreateModal_Amount').val())) {
                            parent.warningAlert("单笔最低金额 < " + toCurrency(tmpServiceCompanyPoint.MinLimit) + " : 单笔限额最低 " + toCurrency(tmpServiceCompanyPoint.MinLimit) + "，请重新输入");
                            return;
                        }

                        if (tmpServiceCompanyPoint.MaxLimit < toNumber($('#WithdrawalCreateModal_Amount').val())) {
                            parent.warningAlert("单日单笔最高金额 > " + toCurrency(tmpServiceCompanyPoint.MaxLimit) + " : 单笔限额最高 " + toCurrency(tmpServiceCompanyPoint.MaxLimit) + "，请重新输入");
                            return;
                        }

                        if (toNumber($('#WithdrawalCreateModal_Amount').val()) + tmpServiceCompanyPoint.Charge > parseFloat(tmpServiceCompanyPoint.CanUsePoint - tmpServiceCompanyPoint.FrozenPoint)) {
                            parent.warningAlert("支付通道可用余额不足");
                            return;
                        }

                        var data = {
                            "银行名称": $('#WithdrawalCreateModal_BankName').val().trim(),
                            "支行名称": $('#WithdrawalCreateModal_BankBranchName').val().trim(),
                            "持卡人姓名": $('#WithdrawalCreateModal_BankCardName').val().trim(),
                            "省份": $('#WithdrawalCreateModal_OwnProvince').val().trim(),
                            "城市": $('#WithdrawalCreateModal_OwnCity').val().trim(),
                            "卡号": $('#WithdrawalCreateModal_BankCard').val().trim(),
                            "币别": 'CNY',
                            "金额": toNumber($('#WithdrawalCreateModal_Amount').val()),
                            "通道代码": $("#WithdrawalCreateModal_ServiceType").val()
                        };

                        if (modifyType == 'add') {
                            tmpWithdrawalCreate(data, true);
                        } else if (modifyType == 'update') {
                            data["序号"] = $("#WithdrawalCreateModal_WithdrawID").val();
                            tmpWithdrawalUpdate(data);
                        }
                } else {
                    switch (o.ResultCode) {
                        case 5:
                            parent.warningAlert("取得钱包资讯失败");
                            break;
                        case 7:
                            parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                            break;
                        default:
                            parent.warningAlert("其他错误");
                            break;
                    }
                }
                parent.wrapperFadeOut();
            } else {
                parent.warningAlert("取得钱包额度失败");
                parent.wrapperFadeOut();
                return;
            }
        });

    }

    function removerow(doc, withdrawID) {
        api.removeWithdrawal(withdrawID, function (s, o) {
            if (s) {
                if (o.ResultCode == 0) {
                    Table
                        .row($(doc).parents('tr'))
                        .remove()
                        .draw(false);
                    getCompanyServicePointResult();
                    CalculationPoint();

                } else {
                    switch (o.ResultCode) {
                        case 6:
                            parent.warningAlert("找不到此单号");
                            break;
                        case 7:
                            parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                            break;
                        default:
                            parent.warningAlert("其他错误");
                            break;
                    }
                }
            }
        });
    }

    function editrow(doc, withdrawID) {

        var row = Table.row(function (idx, data, node) {
            if (data.WithdrawID == withdrawID) {
                index = idx;
                return this;
            }
        });

        modifyWithdrawal(row.data());

    }

    $('#btndelete').click(function () {

        var ary_withdrawID = [];
        for (var i = 0; i < Table.rows().data().length; i++) {
            ary_withdrawID.push(Table.rows().data()[i].WithdrawID);
        }

        api.removeAllWithdrawal(ary_withdrawID, function (s, o) {
            if (s) {
                if (o.ResultCode == 0) {
                    Table
                        .clear()
                        .draw();

                    CalculationPoint();

                } else {
                    switch (o.ResultCode) {
                        case 6:
                            parent.warningAlert("找不到此单号");
                            break;
                        case 7:
                            parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                            break;
                        default:
                            parent.warningAlert("其他错误");
                            break;
                    }
                }
            }
        });

        CalculationPoint();
    })

    function tmpWithdrawalCreate(data, one_data) {
        parent.wrapperFadeIn();
        var array_data = [];

        if (one_data) {
            var obj = new Object();
            obj.BankName = data["银行名称"];
            obj.BankBranchName = data["支行名称"];
            obj.BankCardName = data["持卡人姓名"];
            obj.OwnProvince = data["省份"];
            obj.OwnCity = data["城市"];
            obj.BankCard = data["卡号"];
            obj.CurrencyType = data["币别"];
            obj.Amount = data["金额"];
            obj.ServiceType = data["通道代码"];
            array_data.push(obj);
        } else {
            for (var i = 0; i < data.length; i++) {
                var obj = new Object();
                obj.BankName = data[i]["银行名称"];
                obj.BankBranchName = data[i]["支行名称"];
                obj.BankCardName = data[i]["持卡人姓名"];
                obj.OwnProvince = data[i]["省份"];
                obj.OwnCity = data[i]["城市"];
                obj.BankCard = data[i]["卡号"];
                obj.CurrencyType = 'CNY';
                obj.Amount = data[i]["金额"];
                obj.ServiceType = data[i]["通道代码"];
                array_data.push(obj);
            }

        }



        api.tmpWithdrawalCreate(array_data, function (s, o) {
            if (s) {
                parent.wrapperFadeOut();
                if (o.ResultCode == 0) {
                    Table.rows.add(o.WithdrawalResults).draw(false);

                    if (one_data) {
                        closeWithdrawalCreateModal();
                    }
                    getCompanyServicePointResult();
                    CalculationPoint();

                } else {
                    switch (o.ResultCode) {
                        case 6:
                            parent.warningAlert("建单失败");
                            break;
                        case 7:
                            parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                            break;
                        default:
                            parent.warningAlert("其他错误");
                            break;
                    }
                }
            } else {
                parent.wrapperFadeOut();
                parent.warningAlert("其他错误");
            }
        });
    }

    function tmpWithdrawalUpdate(data) {

        var obj = new Object();
        obj.BankName = data["银行名称"];
        obj.BankBranchName = data["支行名称"];
        obj.BankCardName = data["持卡人姓名"];
        obj.OwnProvince = data["省份"];
        obj.OwnCity = data["城市"];
        obj.BankCard = data["卡号"];
        obj.CurrencyType = data["币别"];
        obj.Amount = data["金额"];
        obj.WithdrawID = data["序号"];
        obj.ServiceType = data["通道代码"];

        api.tmpWithdrawalUpdate(obj, function (s, o) {
            if (s) {
                if (o.ResultCode == 0) {

                    var row = Table.row(function (idx, data, node) {
                        if (data.WithdrawID == o.WithdrawalResult.WithdrawID) {
                            index = idx;
                            return this;
                        }
                    });

                    Table.row(row).data(o.WithdrawalResult).draw(false);

                    closeWithdrawalCreateModal();
                    getCompanyServicePointResult();
                    CalculationPoint();

                } else {
                    switch (o.ResultCode) {
                        case 6:
                            parent.warningAlert("修改失败");
                            break;
                        case 7:
                            parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                            break;
                        default:
                            parent.warningAlert("其他错误");
                            break;
                    }
                }
            }
        });
    }

    $('#btnconfirm').click(function () {
        CalculationPoint(function () {
            //整理傳送到後端data
            var array_data = [];
            for (var i = 0; i < Table.rows().data().length; i++) {
                var obj = new Object();

                if (Table.rows().data()[i]["Checked"]) {
                    if (isNaN(Table.rows().data()[i]["BankCard"])) {
                        parent.warningAlert("卡号" + Table.rows().data()[i]["BankCard"] + "错误,卡号只能有数字");
                        return;
                    }
                    obj.BankName = Table.rows().data()[i]["BankName"];
                    obj.BankBranchName = Table.rows().data()[i]["BankBranchName"];
                    obj.BankCardName = Table.rows().data()[i]["BankCardName"];
                    obj.OwnProvince = Table.rows().data()[i]["OwnProvince"];
                    obj.OwnCity = Table.rows().data()[i]["OwnCity"];
                    obj.BankCard = Table.rows().data()[i]["BankCard"];
                    obj.CurrencyType = Table.rows().data()[i]["CurrencyType"];
                    obj.ServiceType = Table.rows().data()[i]["ServiceType"];
                    obj.ServiceTypeName = Table.rows().data()[i]["ServiceTypeName"];
                    obj.Amount = Table.rows().data()[i]["Amount"];
                    obj.WithdrawID = Table.rows().data()[i]["WithdrawID"];
                    obj.WithdrawSerial = Table.rows().data()[i]["WithdrawSerial"];
                    array_data.push(obj);
                }

            }

            if (array_data.length == 0) {
                parent.warningAlert("没有要新增的资料");
                return;
            }

            confirmGoogleKey(array_data);
        });



    })

    function ShowCompanyPoint() {
        $("#divCompanyPointDetail").empty();
        var strCompanyPointDetail = "";

        api.getCompanyPointTableResult(AdminObject.forCompanyID, function (s, o) {
            if (s) {
                if (o.ResultCode == 0) {
                    companyPointData = o.CompanyPoints;
                    createWithdrawalTable();
                    $.each(o.CompanyPoints, function (i, item) {

                        var canUsePoint = toCurrency(o.CompanyPoints[i].PointValue - o.CompanyPoints[i].LockPointValue - o.CompanyPoints[i].FrozenPoint);
                        strCompanyPointDetail +=
                            '<div class="card wallet" >' +
                            '<div class="header">' +
                            '<h2 class="CompanyPointH2"><strong>' + o.CompanyPoints[i].CurrencyType + '</strong></h2>' +

                            '</div > ' +
                            '<div class="body" > ' +
                            '<p class="text-muted PointValue_' + o.CompanyPoints[i].CurrencyType + '">帐户金额 : ' + toCurrency(o.CompanyPoints[i].PointValue) + '</p>' +
                            '<p class="text-muted CanUsePoint_' + o.CompanyPoints[i].CurrencyType + '">可用金额 : ' + canUsePoint + '</p>' +
                            '<p class="text-muted LockPointValue_' + o.CompanyPoints[i].CurrencyType + '">不可用金额 : ' + toCurrency(o.CompanyPoints[i].LockPointValue) + '</p>' +
                        '<p class="text-muted FrozenPoint_' + o.CompanyPoints[i].CurrencyType + '">冻结金额 : ' + toCurrency(o.CompanyPoints[i].FrozenPoint) + '</p>' +
                        '<p class="text-muted AutoWithdrawAmount_' + o.CompanyPoints[i].CurrencyType + '">代付余额 : ' + toCurrency(o.CompanyPoints[i].AutoWithdrawAmount) + '</p>' +
                            '</div ></div >';
                    });
                    $("#divCompanyPointDetail").html(strCompanyPointDetail);

                } else {
                    switch (o.ResultCode) {
                        case 4:
                            parent.errorAlertCallback("权限不足", function () {
                                parent.ChangePage("Home");
                                parent.CloseActivePage(window.frameElement.id.split('_')[1]);
                            });
                            break;
                        case 5:
                            $('#divCompanyPointDetail').html('<div class="span6" style="float: none; margin: 0 auto;"><h6>尚未設定錢包</h6></div>');
                            break;
                        case 7:
                            parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                            break;
                        default:
                            parent.warningAlert("其他错误");
                            break;
                    }
                }
            }
        });
        $("#divCompanyPoint").show();
    }

    function ShowCompanyPoint2() {

        api.getCompanyPointTableResult(AdminObject.forCompanyID, function (s, o) {
            if (s) {
                if (o.ResultCode == 0) {
                    $.each(o.CompanyPoints, function (i, item) {
                        var canUsePoint = toCurrency(o.CompanyPoints[i].PointValue - o.CompanyPoints[i].LockPointValue - o.CompanyPoints[i].FrozenPoint);
                        $('.PointValue_' + o.CompanyPoints[i].CurrencyType).text("帐户金额 : " + toCurrency(o.CompanyPoints[i].PointValue));
                        $('.CanUsePoint_' + o.CompanyPoints[i].CurrencyType).text("可用金额 : " + canUsePoint);
                        $('.LockPointValue_' + o.CompanyPoints[i].CurrencyType).text("不可用金额 : " + toCurrency(o.CompanyPoints[i].LockPointValue));
                        $('.FrozenPoint_' + o.CompanyPoints[i].CurrencyType).text("冻结金额 : " + toCurrency(o.CompanyPoints[i].FrozenPoint));
                        $('.AutoWithdrawAmount_' + o.CompanyPoints[i].CurrencyType).text("代付余额 : " + toCurrency(o.CompanyPoints[i].AutoWithdrawAmount));
                    });
                } else {
                    switch (o.ResultCode) {
                        case 4:
                            parent.errorAlertCallback("权限不足", function () {
                                parent.ChangePage("Home");
                                parent.CloseActivePage(window.frameElement.id.split('_')[1]);
                            });
                            break;
                        case 5:
                            $('#divCompanyPointDetail').html('<div class="span6" style="float: none; margin: 0 auto;"><h6>尚未設定錢包</h6></div>');
                            break;
                        case 7:
                            parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                            break;
                        default:
                            parent.warningAlert("其他错误");
                            break;
                    }
                }
            }
        });
    }

    function CalculationPoint(cb) {
        $('#sum_PointValue').text('');
        $('#sum_ServicePointValue').text('');
        var text_sum_PointValue = "";
        var text_sum_ServicePointValue = "";
        var calculationdata;
        var oldPointType = "";
        var oldServiceType = "";
        var array_pointValue = [];
        var array_servicepointValue = [];
        var charge = 0;
        var maxLimit = 0;
        var minLimit = 0;
        var tmpCompanyPoint;
        var tmpServiceCompanyPoint;
        var errorMessage = "";
        if (Table.rows().data().length > 0) {
        api.getCompanyPointAndCompanyServicePointResult(function (s, o) {
            if (s) {
                if (o.ResultCode == 0) {
                        calculationdata = Table.rows().data().sort(function (a, b) {
                            var nameA = a["CurrencyType"].toUpperCase();
                            var nameB = b["CurrencyType"].toUpperCase();
                            var nameC = a["ServiceType"].toUpperCase();
                            var nameD = b["ServiceType"].toUpperCase();
                            if (nameA < nameB || nameC < nameD) {
                                return -1;
                            }
                            if (nameA > nameB || nameC < nameD) {
                                return 1;
                            }
                            return 0;
                        });
                        //找出設定的商户手續費相關資訊

                        tmpServiceCompanyPoint = o.CompanyServicePoints.find(function (element) {
                            return element.CurrencyType == calculationdata[0]["CurrencyType"] && element.ServiceType == calculationdata[0]["ServiceType"];
                        });

                        if (tmpServiceCompanyPoint) {
                            charge = tmpServiceCompanyPoint.Charge;
                            maxLimit = tmpServiceCompanyPoint.MaxLimit;
                            minLimit = tmpServiceCompanyPoint.MinLimit;
                        }

                        tmpCompanyPoint = o.CompanyPoints.find(function (element) {
                            return element.CurrencyType == calculationdata[0]["CurrencyType"];
                        });

                        oldPointType = calculationdata[0]["CurrencyType"];
                        oldServiceType = calculationdata[0]["ServiceType"];
                        var pointObj = new Object();
                        pointObj.pointType = calculationdata[0]["CurrencyType"];
                        pointObj.value = 0;

                        var servicepointObj = new Object();
                        servicepointObj.pointType = calculationdata[0]["CurrencyType"];
                        servicepointObj.servicepointType = calculationdata[0]["ServiceType"];
                        servicepointObj.value = 0;
                        for (var i = 0; i < calculationdata.length; i++) {
                            if (calculationdata[i]["Checked"]) {
                                //币别资料统计
                                if (calculationdata[i]["CurrencyType"] != oldPointType) {

                                    //將舊幣別物件加入array內
                                    array_pointValue.push(pointObj);
                                    //產生新幣別的物件
                                    pointObj = new Object();
                                    pointObj.pointType = calculationdata[i]["CurrencyType"];
                                    pointObj.value = 0;


                                }
                                //找出設定的商户手續費相關資訊
                                if (calculationdata[i]["ServiceType"] != oldServiceType) {

                                    tmpServiceCompanyPoint = o.CompanyServicePoints.find(function (element) {
                                        return element.CurrencyType == calculationdata[i]["CurrencyType"] && element.ServiceType == calculationdata[i]["ServiceType"];
                                    });

                                    if (tmpServiceCompanyPoint) {
                                        charge = tmpServiceCompanyPoint.Charge;
                                        maxLimit = tmpServiceCompanyPoint.MaxLimit;
                                        minLimit = tmpServiceCompanyPoint.MinLimit;
                                    } else {
                                        charge = 0;
                                        maxLimit = 0;
                                        minLimit = 0;
                                    }
                                }

                                pointObj.value += calculationdata[i]["Amount"] + charge;
                                oldPointType = calculationdata[i]["CurrencyType"];

                                //支付类型资料统计
                                if (calculationdata[i]["ServiceType"] != oldServiceType) {

                                    //將舊幣別物件加入array內
                                    array_servicepointValue.push(servicepointObj);
                                    //產生新幣別的物件
                                    servicepointObj = new Object();
                                    servicepointObj.pointType = calculationdata[i]["CurrencyType"];
                                    servicepointObj.servicepointType = calculationdata[i]["ServiceType"];
                                    servicepointObj.value = 0;

                                }

                                oldServiceType = calculationdata[i]["ServiceType"];
                                servicepointObj.value += calculationdata[i]["Amount"] + charge;
                                servicepointObj.pointType = calculationdata[i]["CurrencyType"];
                                servicepointObj.servicepointType = calculationdata[i]["ServiceType"];
                            }

                            if (i == calculationdata.length - 1 && pointObj.value != 0) {
                                array_pointValue.push(pointObj);
                                array_servicepointValue.push(servicepointObj);
                            }
                        }
                        //商户额度检查
                        for (var i = 0; i < array_pointValue.length; i++) {

                            text_sum_PointValue += array_pointValue[i].pointType + " : " + toCurrency(array_pointValue[i].value) + " ; ";
                            tmpCompanyPoint = o.CompanyPoints.find(function (element) {
                                return element.CurrencyType == array_pointValue[i].pointType;
                            });
                            var canUsePoint = (tmpCompanyPoint.PointValue - tmpCompanyPoint.LockPointValue - tmpCompanyPoint.FrozenPoint).toFixed(4);
                            if (array_pointValue[i].value > parseFloat(canUsePoint)) {
                                errorMessage += array_pointValue[i].pointType + ",";
                            }

                        }

                        $('#sum_PointValue').text(text_sum_PointValue);

                        if (errorMessage != "") {
                            errorMessage = errorMessage.substring(0, errorMessage.length - 1);
                            parent.warningAlert(errorMessage + "超过可用金额限制");
                            return false;
                        }

                        var checkTableData = Table.rows().data();
                        for (var i = 0; i < checkTableData.length; i++) {
                            if (checkTableData[i]["Checked"]) {
                                if (!(minLimit <= checkTableData[i]["Amount"] && maxLimit >= checkTableData[i]["Amount"])) {
                                    parent.warningAlert("第" + (i + 1) + "笔资料超过金额限制");
                                    return false;
                                }
                            }
                        }

                        //商户支付方式额度检查
                        for (var i = 0; i < array_servicepointValue.length; i++) {

                            var canUsePoint = o.CompanyServicePoints.find(function (element) {
                                return element.CurrencyType == array_servicepointValue[i].pointType && element.ServiceType == array_servicepointValue[i].servicepointType;
                            });
                            if (array_servicepointValue[i].value != 0) {
                                text_sum_ServicePointValue += canUsePoint.ServiceTypeName + " : " + toCurrency(array_servicepointValue[i].value) + " ; ";
                            }


                        }
                        $('#sum_ServicePointValue').text(text_sum_ServicePointValue);

                    if (cb) {
                        cb();
                    }


                    } else {
                        switch (o.ResultCode) {
                            case 5:
                                parent.warningAlert("取得钱包资讯失败");
                                break;
                            case 7:
                                parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                                break;
                            default:
                                parent.warningAlert("其他错误");
                                break;
                        }
                    }
                } else {
                    parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                }
            });
        }

    }

    function ExcelCheckSimplifiedChinese(data) {

        for (var i = 0; i < data.length; i++) {
            if (data[i]['银行名称'] != '') {
                //if (simplifiedchineseCheck(data[i]['银行名称']) == 1) {
                //    return false;
                //}
            } else {
                return false;
            }
            if (data[i]['支行名称'] != '') {
                //if (simplifiedchineseCheck(data[i]['支行名称']) == 1) {
                //    return false;
                //}
            }
            if (data[i]['持卡人姓名'] != '') {
                //if (simplifiedchineseCheck(data[i]['持卡人姓名']) != 0) {
                //    return false;
                //}
            } else {
                return false;
            }

            if (data[i]['省份'] != '') {
                //if (simplifiedchineseCheck(data[i]['省份']) != 0) {
                //    return false;
                //}
            }

            if (data[i]['城市'] != '') {
                //if (simplifiedchineseCheck(data[i]['城市']) != 0) {
                //    return false;
                //}
            }

        }
        return true;
    }

    function ExcelCheckCalculationPoint(data) {

        var bol_checkdata = true;
        var calculationdata=[];
        var tmpCompanyPoint;
        var savedata = [];
        if (data.length > 0) {
            data = data.sort(function (a, b) {
                var nameA = a["通道代码"].toUpperCase();
                var nameB = b["通道代码"].toUpperCase();
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
                return 0;
            });

            for (var i = 0; i < data.length; i++) {

                var index = -1;
                index = calculationdata.findIndex(function (element) {
                    return element.CurrencyType == 'CNY' && element.ServiceType == data[i]["通道代码"];
                })

                if (index == -1) {
                    var serviceTypeData = getCompanyServicePointByServiceType(data[i]["通道代码"], 'CNY');
                    if (serviceTypeData == undefined) {
                        parent.warningAlert('通道代码有误');
                        return;
                    }
                    var tmpdata = {
                        CurrencyType: 'CNY',
                        ServiceType: data[i]["通道代码"],
                        TotalAmount: data[i]["金额"],
                        TotalCount: 1,
                        Charge: serviceTypeData.Charge
                    }
                    calculationdata.push(tmpdata);
                } else {
                    calculationdata[index]["TotalAmount"] += data[i]["金额"];
                    calculationdata[index]["TotalCount"] +=1;
                }
            }
        }

        parent.wrapperFadeIn();
        api.getCompanyPointAndCompanyServicePointResult(function (s, o) {
            if (s) {
                if (o.ResultCode == 0) {

                    parent.wrapperFadeOut();
                    tmpCompanyPoint = o.CompanyPoints.find(function (element) {
                        return element.CurrencyType == 'CNY';
                    });

                    //总钱包检查
                    if (!tmpCompanyPoint) {
                        parent.warningAlert("取得提现额度失败");
                        return;
                    }
                    var withdrawalCompanyPoint = 0;
                    var withdrawalCompanyServicePoint = 0;
                    for (var i = 0; i < calculationdata.length; i++) {
                        if (calculationdata[i].CurrencyType == 'CNY') {
                            withdrawalCompanyPoint += calculationdata[i].TotalAmount + calculationdata[i].TotalCount * calculationdata[i].Charge;
                        }
                        withdrawalCompanyServicePoint = calculationdata[i].TotalAmount + calculationdata[i].TotalCount * calculationdata[i].Charge;
                        //通道余额检查
                        tmpServiceCompanyPoint = o.CompanyServicePoints.find(function (element) {
                            return element.CurrencyType == 'CNY' && element.ServiceType == calculationdata[i].ServiceType;
                        });

                        if (!tmpServiceCompanyPoint) {
                            parent.warningAlert("取得支付通道额度错误,请联系系统商");
                            return;
                        }

                        if (tmpServiceCompanyPoint.MinLimit == 0 || tmpServiceCompanyPoint.MaxLimit == 0) {
                            parent.warningAlert("尚未设定提现限额,请联系系统商");
                            return;
                        }


                        if (withdrawalCompanyServicePoint > parseFloat(tmpServiceCompanyPoint.CanUsePoint - tmpServiceCompanyPoint.FrozenPoint)) {
                            parent.warningAlert("支付通道 " + calculationdata[i].ServiceType+" 可用余额不足");
                            return;
                        }
                    }

                    var canUsePoint = (tmpCompanyPoint.PointValue - tmpCompanyPoint.LockPointValue - tmpCompanyPoint.FrozenPoint).toFixed(4);

                    if (withdrawalCompanyPoint > parseFloat(canUsePoint)) {
                        var PointValue = tmpCompanyPoint.PointValue.toFixed(4);
                        var FrozenPoint = tmpCompanyPoint.FrozenPoint.toFixed(4);
                        var InWithdrawProcessPoint = tmpCompanyPoint.InWithdrawProcessPoint.toFixed(4);
                        parent.warningAlertByHtml("总钱包额度不足", `总金额:${PointValue}</br>可用金额:${canUsePoint}</br>下发处理中:${InWithdrawProcessPoint}</br>冻结金额:${FrozenPoint}`);
                        return;
                    }

                    for (var i = 0; i < data.length; i++) {
                        tmpServiceCompanyPoint = o.CompanyServicePoints.find(function (element) {
                            return element.CurrencyType == 'CNY' && element.ServiceType == data[i]["通道代码"];
                        });

                        if (!tmpServiceCompanyPoint) {
                            parent.warningAlert("取得支付通道额度错误,请联系系统商");
                            return;
                        }

                        if (tmpServiceCompanyPoint.MinLimit > data[i]["金额"]) {
                            parent.warningAlert("单笔最低金额 < " + toCurrency(tmpServiceCompanyPoint.MinLimit) + " : 单笔限额最低 " + toCurrency(tmpServiceCompanyPoint.MinLimit) + "，请重新输入");
                            return;
                        }

                        if (tmpServiceCompanyPoint.MaxLimit < data[i]["金额"]) {
                            parent.warningAlert("单日单笔最高金额 > " + toCurrency(tmpServiceCompanyPoint.MaxLimit) + " : 单笔限额最高 " + toCurrency(tmpServiceCompanyPoint.MaxLimit) + "，请重新输入");
                            return;
                        }

                        var tmpdata = {
                            "银行名称": data[i]["银行名称"],
                            "支行名称": data[i]["支行名称"],
                            "持卡人姓名": data[i]["持卡人姓名"],
                            "省份": data[i]["省份"],
                            "城市": data[i]["城市"],
                            "卡号": data[i]["卡号"],
                            "币别": 'CNY',
                            "金额": data[i]["金额"],
                            "通道代码": data[i]["通道代码"]
                        };

                        savedata.push(tmpdata);
                    }

                    tmpWithdrawalCreate(savedata, false);
                } else {
                    switch (o.ResultCode) {
                        case 5:
                            parent.warningAlert("取得钱包资讯失败");
                            break;
                        case 7:
                            parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                            break;
                        default:
                            parent.warningAlert("其他错误");
                            break;
                    }
                }
                parent.wrapperFadeOut();
            } else {
                parent.warningAlert("取得钱包额度失败");
                parent.wrapperFadeOut();
                return;
            }
        });


        return bol_checkdata;
    }

    function CreateExcel() {
        var data = [
            ["银行名称", "支行名称", "持卡人姓名", "省份", "城市", "卡号", "通道代码", "金额"],
            ['中国建设银行', '北京分行', '王晓明', '北京', '北京市', '5566', 'AP007', 100],
            ['农业银行', '北京分行', '王大明', '北京', '北京市', '55688', 'AP007', 100],
            ['中国建设银行', '北京分行', '王晓明', '北京', '北京市', '5566', 'AP007', 500]
        ];
        var sheet = XLSX.utils.aoa_to_sheet(data);
        openDownloadDialog(sheet2blob(sheet), '提现范例.xlsx');
    }

    function openDownloadDialog(url, saveName) {
        if (typeof url == 'object' && url instanceof Blob) {
            url = URL.createObjectURL(url); // 创建blob地址
        }
        var aLink = document.createElement('a');
        aLink.href = url;
        aLink.download = saveName || ''; // HTML5新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效
        var event;
        if (window.MouseEvent) event = new MouseEvent('click');
        else {
            event = document.createEvent('MouseEvents');
            event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
        }
        aLink.dispatchEvent(event);
    }

    function sheet2blob(sheet, sheetName) {
        sheetName = sheetName || 'sheet1';
        var workbook = {
            SheetNames: [sheetName],
            Sheets: {}
        };
        workbook.Sheets[sheetName] = sheet;
        // 生成excel的配置项
        var wopts = {
            bookType: 'xlsx', // 要生成的文件类型
            bookSST: false, // 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性
            type: 'binary'
        };
        var wbout = XLSX.write(workbook, wopts);
        var blob = new Blob([s2ab(wbout)], { type: "application/octet-stream" });
        // 字符串转ArrayBuffer
        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
        return blob;
    }

    $('#Excel_download').click(function () {
        CreateExcel();
    })

    function getHeaderRow(sheet) {
        var headers = [];
        var range = XLSX.utils.decode_range(sheet['!ref']);
        var C, R = range.s.r; /* start in the first row */
        /* walk every column in the range */
        for (C = range.s.c; C <= range.e.c; ++C) {
            var cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })] /* find the cell in the first row */

            var hdr = "UNKNOWN " + C; // <-- replace with your desired default
            if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);

            headers.push(hdr);
        }
        return headers;
    }
    function simplifiedchineseCheck(checkstr) {
        //0=通過驗證/1=不為中文名稱/2=包含繁體字
        var returnValue = 0;
        //限制中文注册
        var re = new RegExp(/^[\u4E00-\u9FA5]+$/);
        //限制繁体注册
        var re2 = new RegExp(/^(?!.*[萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽黿鼂鼉鞀鼴齇齊齏齒齔齕齗齟齡齙齠齜齦齬齪齲齷龍龔龕龜誌製谘隻裡係範鬆冇嚐嘗鬨麵準鐘彆閒乾儘臟拚]).+$/);

        if (!re.test(checkstr)) {
            returnValue = 1;
            return returnValue;
        }
        else if (!re2.test(checkstr)) {
            returnValue = 2;
            return returnValue;
        }

        return returnValue
    }

    function confirmGoogleKey(array_data) {
        swal({
            title: "请输入 Google 验证码：",
            text: "",
            type: "input",
            showCancelButton: true,
            closeOnConfirm: false,
            confirmButtonText: "确认",
            cancelButtonText: "取消",
            animation: "slide-from-top",
            inputPlaceholder: "Google 验证码"
        },
            function (inputValue) {
                if (inputValue === false) return false;

                if (inputValue === "") {
                    swal.showInputError("尚未输入 Google 验证码");
                    return false
                }
                $('.sweet-alert').find('.confirm').attr("disabled", true);

                api.WithdrawalCreate(array_data, inputValue, function (s, o) {
                            if (s) {
                                if (o.ResultCode == 0) {
                                    var failCount = array_data.length - o.Message;

                                    parent.successAlert3("申请完成,成功笔数" + o.Message + ",失败笔数:" + failCount, function () {
                                        parent.refreshPage(window.frameElement.id.split('_')[1]);
                                    });

                                } else {
                                    switch (o.ResultCode) {

                                        case 7:
                                            parent.errorAlert("您已断线请重新登入", "Login.cshtml");
                                            break;
                                        case 13:
                                            parent.warningAlert(o.Message);
                                            break;
                                        case 14:
                                            parent.warningAlert(o.Message);
                                            break;
                                        case 15:
                                            parent.warningAlert(o.Message);
                                            break;
                                        default:
                                            parent.successAlert3("目前没有可申请订单,5分钟内只能提交一张相同银行卡资讯订单" , function () {
                                                parent.refreshPage(window.frameElement.id.split('_')[1]);
                                            });

                                            break;
                                    }
                                }
                                $('.sweet-alert').find('.confirm').attr("disabled", false);

                            } else {
                                $('.sweet-alert').find('.confirm').attr("disabled", false);

                            }
                        });

            });
    }
</script>